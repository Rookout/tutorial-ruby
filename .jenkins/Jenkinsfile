import org.rookout.files.Utilities
import org.rookout.testsUtil.TestUtilities

def label = "worker-${UUID.randomUUID().toString()}"
def testsNames = null

podCreator.initMain(label: label) {
    node(label) {
        print(pwd())
        container('rookout-helm') {
            def myRepo = checkout scm
            env.GIT_BRANCH = myRepo.GIT_BRANCH.replaceAll('/|_', '-')
            def testFolder = "regression-test"
            stage('Creating tests and building docker files') {
                def scriptToUse = libraryResource 'generate_tests.groovy'
                def jobName = "tutorial-ruby"
                def dockerTag = TestUtilities.getDockerTagNameForRegression(testFolder, jobName)
                sh("docker build . -t ${dockerTag} && gcloud docker -- push ${dockerTag}")
                sh("ls -alt")
                print(pwd())
                sh("ls -alt ./.jenkins")
                TestUtilities.createTest(this, scriptToUse, jobName, pwd() + "/.jenkins", "jenkinsfile.test", testFolder)

            }
            try {
                if ("master".equals(env.GIT_BRANCH)) {
                    stage('Run ruby tests') {
                        triggerer.regressionEx(GIT_BRANCH: "master", GIT_REPO: "ruby-sdk", LANGUAGE_TO_RUN: "ruby") {

                        }
                    }
                }
            }catch (e) {
                if ("master".equals(env.GIT_BRANCH)) {
                withCredentials([
                    string(credentialsId: 'SLACK_TOKEN', variable: 'SLACK_API_TOKEN')
                ]) {
                        stage('Notify') {
                            container('rookout-helm') {
                                sh "rbt notify custom_msg --channel sdk --msg \"${env.GIT_REPO}/${GIT_BRANCH} Pipeline has failed.\""
                            }
                        }
                    }
                }
                throw e
            }
        }
    }
}